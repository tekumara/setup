[pull]
	# Use merge to resolve divergent branches on pull.
	rebase = false
[branch "main"]
	# Except for main/master use rebase instead of merge to preserve a linear history.
	rebase = true
[branch "master"]
	rebase = true
[push]
	# When pushing a branch for the first time a remote branch needs to be supplied. This
	# automatically sets the remote branch to one with the same name as the current branch.
	# Avoids "The current branch X has no upstream branch."
	# see https://mincong.io/2018/05/02/git-upstream-tracking/
	default = current

	# When pushing a branch set it up to track the remote branch.
	# Avoids "There is no tracking information for the current branch" when subsequently pulling.
	autoSetupRemote = true
[rebase]
	# Automatically create a temporary stash entry before the operation begins, and apply it after the operation ends.
	# This means that you can run rebase on a dirty worktree without the message "error: cannot pull with rebase: You have unstaged changes"
	autoStash = true

	# merge squash & fixup commits see https://robots.thoughtbot.com/autosquashing-git-commits
	autosquash = true
[core]
	# checkout as-is, commit as-is
	autocrlf = false
	#  don't page if output will fit on one screen (for things like git config -l)
	pager = diff-so-fancy | less --tabs=4 -RFXi
	# pager = less -F -X
	# global ignore
	excludesfile = ~/.gitignore_global
[init]
	defaultBranch = main
[user]
	name = Oliver Mannion
	email = 125105+tekumara@users.noreply.github.com
[diff "jupyternotebook"]
	command = git-nbdiffdriver diff
[merge "jupyternotebook"]
	driver = git-nbmergedriver merge %O %A %B %L %P
	name = jupyter notebook merge driver
[difftool "nbdime"]
	cmd = git-nbdifftool diff \"$LOCAL\" \"$REMOTE\" \"$BASE\"
[difftool]
	prompt = false
[mergetool "nbdime"]
	cmd = git-nbmergetool merge \"$BASE\" \"$LOCAL\" \"$REMOTE\" \"$MERGED\"
[mergetool]
	keepBackup = false
	prompt = false
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
[diff-so-fancy]
	first-run = false
[includeIf "gitdir:~/code/ghec/"]
	# set alternate user.email for ghec repos
	path = ~/.gitconfig_ghec
[diff]
	tool = bc
	algorithm = histogram
[merge]
	tool = bc
	conflictstyle = diff3
[merge "mergiraf"]
    name = mergiraf
    driver = mergiraf merge --git %O %A %B -s %S -x %X -y %Y -p %P -l %L
[mergetool "bc"]
	trustExitCode = true
[credential "https://github.com"]
	helper =
	helper = !/opt/homebrew/bin/gh auth git-credential
[credential "https://gist.github.com"]
	helper =
	helper = !/opt/homebrew/bin/gh auth git-credential
[branch]
	# git branch is sorted with most recent commits first
	# matches the order of git log
	sort = -committerdate
